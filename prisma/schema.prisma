// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    address       String?   @unique
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    gamesCreated Game[] @relation(name: "GameCreatedBy")

    gamesPlayed Player[]

    isDealer Boolean @default(false)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Game {
    id          String    @id @default(cuid())
    name        String
    description String?
    image       String?
    createdBy   User      @relation(fields: [createdById], references: [id], onDelete: Cascade, name: "GameCreatedBy")
    createdById String
    players     Player[]
    deckId      String
    rounds      Round[]
    hand        Hand[]
    cardFids    CardFid[]
}

model Player {
    id       String @id @default(cuid())
    userId   String
    user     User   @relation(fields: [userId], references: [id])
    gameId   String
    game     Game   @relation(fields: [gameId], references: [id])
    position Int
    bets     Bet[]
    hands    Hand[]

    @@unique([gameId, position])
}

model Round {
    id              String   @id @default(cuid())
    gameId          String
    game            Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    betsFinal       Boolean  @default(false)
    bets            Bet[]
    hands           Hand[]
    status          String
    currentBetIndex Int
}

model Bet {
    id        String   @id @default(cuid())
    roundId   String
    round     Round    @relation(fields: [roundId], references: [id], onDelete: Cascade)
    playerId  String
    player    Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
    amount    Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([roundId, playerId])
}

model Hand {
    id        String   @id @default(cuid())
    playerId  String
    player    Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
    gameId    String
    game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
    cards     Card[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    status    String
    round     Round    @relation(fields: [roundId], references: [id])
    roundId   String
}

model Card {
    id        String   @id @default(cuid())
    value     String
    suit      String
    code      String
    image     String
    isVisible Boolean
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    hand      Hand?    @relation(fields: [handId], references: [id])
    handId    String?
}

model CardFid {
    id        String   @id @default(cuid())
    gameId    String
    game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
    cardValue String
    fid       Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([gameId, cardValue])
}

model SnakeGame {
    id      String @id @default(cuid())
    history Json
    score   Int
    player  String
}
